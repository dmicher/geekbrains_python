# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

def run():
    """Выполняет задание 1 для урока № 4
    Для запуска этого сценария из интерфейса главного меню."""
    print("\r\nЗадание 1\r\n")
    print("Этот скрипт может быть выполнен из командной строки (терминала). Подробнее - в подсказке [-h].")

    user_input = input("Вы желаете использовать скрипт из текущего интерфейса?" + 
                       "\r\n(да = y, д, пустой ввод; иное - нет) ").lower()
  
    if not user_input in ("y", "д", "") or user_input is None:
        return

    while True:
        user_input = input("Введите параметры команды. [-h] - подсказка по командам: ").lower().strip()
        if user_input in ("q", "й"):
            break
        else:
            calculate(user_input.split())

def hints():
    """Выводит подсказку по утилите в консоль"""
    print("\r\nСинтаксис команды: task1 [param1] [prarm2] ...")
    print("\r\nЕдиничные параметры:")
    print("\t-h\t- вывести эту подсказку (имеет приоритет перед другим вводом);")
    print("\r\nПараметры, применяемые вместе (порядок не важен):")
    print("\t-s=v\t- зарплата работника за час (дробное положительное число); v - значение аргумента;")
    print("\t-t=v\t- количество отработанных часов (дробное неотрицательное число); v - значение аргумента;")
    print("\t-p=v\t- (опционально) премия (дробное неотрицательное число); v - значение аргумента.")
    print("\r\nПримеры:")
    print("- запуск из консоли/терминала:\tpython ./task1.py -s=12 -t=23 -p=1000")
    print("- запуск из этого интерфейса:\t-t=23 -p=1000 -s=12\r\n")

def calculate(args: [] = None):
    """Производит единичный расчёт по введённым параметрам"""

    # ищет приоритетную команду "Помощь", чтобы выдать подсказку; также выдаёт подсказку, если не передать параметры вовсе
    params = args if args is not None else argv # если параметры не переданы функции, то ищет их в параметрах из консоли/терминала
    if "-h" in params or (args is not None and len(params) < 1):
        hints()
        return
    if args is None and (len(params) == 1 or (len(params) == 2 and params[1] == "")): # при вызове из командной строки - 1 параметр - путь к файлу
        hints()
        return

    # парсит список параметров вида ["-s=1.2", "-t=29,1", "-p=0.2"] в словарь вида { "s": 1.2, "t": 29.1, "p": 0.2 }
    try:
        params = {param.split("=")[0][1:2]: try_float(param.split("=")[1]) for param in params if param.startswith("-") and param.count("=") == 1}
    except:
        print("Неверный формат параметров. Расчёт остановлен")
        return

    # проверка приемлемости параметров
    for p in ("s", "t"):
        if p not in params.keys():
            print("В переданных данных отсутствует параметр [-" + p + "]. Расчёт остановлен.")
            return
        if params[p] is None:
            print(f"Параметр [-{p}] имеет неверный формат. Расчёт остановлен.")
            return

    if 'p' not in params.keys():
        params['p'] = .0

    stop = 0
    if params["s"] <= 0:
        print("Зарплата работника за час не может быть меньше или равна нулю.")
        stop = 1
    if params["t"] < 0:
        print("Количество отработанных рабоником часов не может быть меньше нуля.")
        stop = 1
    if params["p"] < 0:
        print("Премия работника не может быть меньше нуля")

    if bool(stop):
        print("Расчёт остановлен.")
        return

    # Собственно, расчёт
    print(f"Размер зарплаты = {params['s']} * {params['t']} + {params['p']} = " + str(round(params['s'] * params['t'] + params['p'], 2)))

def try_float(string):
    """Пытается преобразовать строку в тип float. При провале возвращает None
    :param string: преобразуемая строка
    :return: полученное число
    :rtype float, None
    """
    try:
        return float(string.replace(',', '.'))
    except:
        return None

# для запуска этого сценария отдельно из консоли/терминала
if __name__ == '__main__':
    calculate()